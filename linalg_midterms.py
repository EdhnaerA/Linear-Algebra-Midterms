# -*- coding: utf-8 -*-
"""LinAlg-Midterms.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1iXuBGdm4FEJw_vG90PzjhT70J_2zZws5

<h1>Linear Algebra (CpE210A)

<h3>Midterms Project

Coded and submitted by:<br>
<i>Arcera, Edhnaer<br>
    201910958 <br>
   58051 </i>

Directions
This Jupyter Notebook will serve as your base code for your Midterm Project. You must further format and provide complete discussion on the given topic. 
- Provide all necessary explanations for specific code blocks. 
- Provide illustrations for key results.
- Observe clean code (intuitive variable names, proper commenting, proper code spacing)
- Provide a summary discussion at the end

Failure to use this format or failure to update the document will be given a deduction equivalent to 50% of the original score.

### Case

Bebang is back to consult you about her business. Furthering her data analytics initiative she asks you for help to compute some relevant data. Now she is asking you to compute and visualize her sales and costs for the past year. She has given you the datasets attached to her request.

### Problem

State and explain Bebang's problem here and provide the deliverables.

# Proof of Concept

Now that you have a grasp on the requirements we need to start with making a program to prove that her problem is solvable. As a Linear Algebra student, we will be focusin on applying vector operations to meet her needs. First, we need to import her data. We will use the `pandas` library for this. For more information you can look into their documentation [here](https://pandas.pydata.org/).
"""

import pandas as pd

file_prices = "/content/bebang prices.csv"
file_sales = "/content/bebang sales.csv"

df_prices = pd.read_csv(file_prices, index_col=0)
df_sales = pd.read_csv(file_sales)


## Let's check what's in df_prices
df_prices

## Let's check the sales dataframe
df_sales

"""## Part 1: Monthly Sales"""

import numpy as np
### Vectorizing the data

sales_mat = np.array(df_sales.set_index('flavor'))
prices_mat = np.array(df_prices)[0] ## reshape this vector to the appropriate size
costs_mat = np.array(df_prices)[1] ## reshape this vector to the appropriate size


## Do not alter these lines
print(sales_mat.shape)
print(prices_mat.shape)
print(costs_mat.shape)
# Expected Output
# (12, 12)
# (12, 1)
# (12, 1)

"""#### Formulas

Take note that the fomula for revenue is: <br>
$revenue = sales * price $ <br>
In this case, think that revenue, sales, and price are vectors instead of individual values <br>
The formula of cost per item sold is: <br>
$cost_{sold} = sales * cost$ <br>
The formula for profit is: <br>
$profit = revenue - cost_{sold}$ <br>
Solving for the monthly profit will be the sum of all profits made on that month.
"""

#Create a function that *returns* and prints the monthly sales and profit for each month 

def monthly_sales(price, cost, sales):
    monthly_revenue = sales * price
    monthly_costs = sales * cost
    monthly_profits = monthly_revenue - monthly_costs  
    
    mprofit = monthly_profits.transpose()
    profitmonth = mprofit.sum(axis = 1)

    df_profit = pd.DataFrame(profitmonth)
    df_profit.columns = ["Monthly Profits"]
    df_profit.index = ['January','February',
                       'March','April','May',
                       'June','July','August',
                       'September','October',
                       'November','December']
    print(df_profit)
    return monthly_revenue.flatten(), monthly_costs.flatten(), monthly_profits.flatten()

### Do not alter this cell
month_rev, month_cost, month_profit = monthly_sales(prices_mat, costs_mat, sales_mat)
### print the values
print(" ")
print("Monthly Revenue")
print(month_rev)
print(" ")
print("Monthly Cost")
print(month_cost)
print(" ")
print("Monthly Profit")
print(month_profit)

##printing the monthly revenue, monthly cost, and monthly profit of bebang's business

"""## Part 2: Flavor Sales"""

#Create a function that *returns* and prints the flavor profits for the whole year 
f = []

def flavor_sales(price, cost, sales):
    flavor_revenue = sales * price
    flavor_costs = sales * cost
    flavor_profits = flavor_revenue - flavor_costs  

    redvelvet = flavor_profits[0].sum()
    f.append(redvelvet)

    oreo = flavor_profits[1].sum()
    f.append(oreo)

    sugarglazed = flavor_profits[2].sum()
    f.append(sugarglazed)

    almondhoney = flavor_profits[3].sum()
    f.append(almondhoney)

    matcha =  flavor_profits[4].sum()
    f.append(matcha)

    strawberrycream =  flavor_profits[5].sum()
    f.append(strawberrycream)

    brownsugarboba =  flavor_profits[6].sum()
    f.append(brownsugarboba)

    fruitsandnuts =  flavor_profits[7].sum()
    f.append(fruitsandnuts)

    darkchocolate =  flavor_profits[8].sum()
    f.append(darkchocolate)

    chocolateandorange =  flavor_profits[9].sum()
    f.append(chocolateandorange)

    chocomint =  flavor_profits[10].sum()
    f.append(chocomint)

    chocobutternaught =  flavor_profits[11].sum()
    f.append(chocobutternaught)



    df_flavors = pd.DataFrame(f)
    df_flavors.columns = ["Yearly Profit"]
    df_flavors.index = ["Red Velvet","Oreo","Sugar Glazed","Almond Honey",
                        "Matcha","Strawberry Cream","Brown Sugar Boba",
                        "Fruits and Nuts","Dark Chocolate","Chocolate and Orange"
                        ,"Choco Mint","Choco Butternaught"]
    print(df_flavors)
    print(' ')

    return flavor_profits.flatten()

### Do not alter this cell
flavor_profit = flavor_sales(prices_mat, costs_mat, sales_mat)
### print the values
print('')
print("Profit\n",flavor_profit)

### identify the best-selling and least-selling flavors. You can use np.sort() or np.argmax() for this.
df_sales["sum"] = df_sales.sum(axis = 1)
df_sales.sort_values("sum",axis=0, ascending=True, 
                     inplace=True, na_position='first')
print('Monthly Sales of Flavors')
print(df_sales)
worst3flavors = [(df_sales.iloc[0]['flavor']),(df_sales.iloc[1]['flavor']),
                 (df_sales.iloc[2]['flavor'])]
print("3 Least Selling Flavors are",worst3flavors)
print('')
best3flavors = [(df_sales.iloc[11]['flavor']),(df_sales.iloc[10]['flavor']),
                (df_sales.iloc[9]['flavor'])]
print("3 Best Selling Flavors are",best3flavors)

"""## Part 3: Visualizing the Data (Optional for +40%)
You can try to visualize the data in the most comprehensible chart that you can use.
"""

# Commented out IPython magic to ensure Python compatibility.
import numpy as np
import matplotlib.pyplot as plt
import matplotlib
import seaborn as sns

# %matplotlib inline

"""#### Entire Dataset"""

print(df_sales.plot('flavor',[1,2,3,4,5,6,7,8,9,10,11,12],kind = 'bar'))
print(df_prices.plot('red velvet',[1,2,3,4,5,6,7,8,9,10,11],kind = 'bar'))

"""#### Monthly Sales"""



"""#### Flavor Sales"""

print(df_sales.plot('flavor',[1,2,3,4,5,6,7,8,9,10,11,12],kind = 'bar'))

"""## Part 4: Business Recommendation and Conclusion
Present the findings of your data analysis and provide recommendations

In this data, it shows that there are five best selling flavors, the first one is choco butter naught, followed by sugar gazed, red velted, matcha and brown sugar boba. From the month of june until november are the months that has been hard to sell.
"""